version: '3.8'

services:
  # MongoDB with Replica Set
  mongodb-primary:
    image: mongo:7.0
    container_name: tasktracker_mongodb_primary
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: tasktracker
      MONGO_REPLICA_SET_NAME: rs0
    ports:
      - "27017:27017"
    volumes:
      - mongodb_primary_data:/data/db
      - ./mongodb.key:/opt/keyfile/mongodb.key:ro
    command: ["mongod", "--replSet", "rs0", "--keyFile", "/opt/keyfile/mongodb.key", "--bind_ip_all"]
    networks:
      - tasktracker_network

  # Redis Cluster
  redis-master:
    image: redis:7-alpine
    container_name: tasktracker_redis_master
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_master_data:/data
    networks:
      - tasktracker_network

  # NGINX Load Balancer
  nginx:
    image: nginx:alpine
    container_name: tasktracker_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - backend-1
      - backend-2
    networks:
      - tasktracker_network

  # Backend Instance 1
  backend-1:
    image: ${DOCKER_USERNAME}/tasktracker:latest
    container_name: tasktracker_backend_1
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb-primary:27017/tasktracker?authSource=tasktracker&replicaSet=rs0
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 7d
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      LOG_LEVEL: info
    volumes:
      - ./logs:/app/logs
    depends_on:
      - mongodb-primary
      - redis-master
    networks:
      - tasktracker_network

  # Backend Instance 2
  backend-2:
    image: ${DOCKER_USERNAME}/tasktracker:latest
    container_name: tasktracker_backend_2
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      MONGODB_URI: mongodb://${MONGO_USER}:${MONGO_PASSWORD}@mongodb-primary:27017/tasktracker?authSource=tasktracker&replicaSet=rs0
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRES_IN: 7d
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis-master:6379
      LOG_LEVEL: info
    volumes:
      - ./logs:/app/logs
    depends_on:
      - mongodb-primary
      - redis-master
    networks:
      - tasktracker_network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: tasktracker_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - tasktracker_network

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: tasktracker_grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    networks:
      - tasktracker_network

volumes:
  mongodb_primary_data:
  redis_master_data:
  prometheus_data:
  grafana_data:
  nginx_logs:

networks:
  tasktracker_network:
    driver: bridge